< 소켓의 옵션과 입출력 버퍼의 크기 >

Protocol level		Opion Name	Get	Set

SOL_SOCKET		SO_SNDBUF	o	x

...





IPPROTO_IP		IP_TOS		o	x

...



IPPROTO_TCP		TCP_KEEPALIVE	o	o

...



[getsockopt & setsockopt]
getsockopt 참조(Get) 
setsockopt 변경(Set)


[SO_SNDBUF & SO_RCVBUF]
SO_SNDBUF : 출력 버퍼의 크기와 관련된 옵션
SO_RCVBUF : 입력 버퍼의 크기와 관련된 옵션

버퍼의 옵션을 통하여 버퍼의 크기를 변경한다고 하여도 정확히 요구한 대로 동작하지 않는다.
ex) snd_buf <- 1024*3 (3KByte) 로 선언하면 6144의 크기를 갖게 된다.

< SO_REUSEADDR >

- 주소할당 에러(Binding Error)발생
 Time-wait 상태?
 > reuseaddr_eserver.c 참조

클라이언트 측에서 서버 측으로 종료를 먼저 알리게끔 한다. 클라이언트에서 Q 메시지를 입력하면, close함수를 홀출하게 되어 서버 측으로 FIN 메시지를 먼저 전송하면서 Four-way handshaking 과정을 거친다.
프로그램을 강제 종료 할 경우에도 운영체제가 파일 및 소켓을 모두 닫아주는데, 이 과정에서 close 함수를 호출한 것과 마찬가지로 서버측으로 FIN 메시지가 전달된다.

하지만 반대의 경우 서버측에서 먼저 close를 하게 되면 동일 포트 번호로의 서버 재실행에 문제가 생긴다. "bind() error" 메시지만 출력이 될 뿐 3분간 실행되지 않는다.
그 이유는 Time-Wait 상태 때문인데, Four-way handshaking 을 통하여 Serv)FIN - Clnt)ACK - Clnt)FIN - Serv)ACK 이후에 Serv)는 Time-wait 상태를 일정 시간 거치게 된다.
만약 마지막으로 serv가 송신한 ACK가 중간에 소실되었다고 할때 clnt 측에서는 FIN에대한 응답을 듣지 못했음으로 재전송을 시도할 것이다. 따라서 이 Time-wait 기간 동안 clnt의 FIN 재전송을 기다린다.

- 주소의 재할당
 급작스럽게 서버가 종료되었을 때, 재빨리 서버를 재 가동시켜 서비스를 이어가야 하는데, Time-wait 상태 때문에 몇분을 기다려야 한다면 문제가 된다. 또한, 다른 호스트에 보낸 FIN 메시지를 수신하게 되면
서버는 ACK를 보내기 위해 Time-wait timer를 재가동하게 된다. 
 
 해결책

소켓의 옵션 중에서 SO_REUSEADDR의 상태를 변경하면 된다. 이의 적절한 변경을 통해서 Time-wait 상태에 있는 소켓에 할당되어 있는 PORT번호를 새로 시작하는 소켓에 할당되게 한다.
SO_REUSEADDR의 디폴트 값은 0인데, 이는 Time-wait 상태에 있는 소켓의 PORT번호는 할당이 불가능함을 의미한다. 따라서 이 값을 1로 변경하여 사용한다. (예제의 주석문을 제거한다.)


- TCP_NODELAY

 Nagle 알고리즘

Nagle 알고리즘은 네트워크 상에서 돌아다니는 패킷들의 흘러 넘침을 막기 위해서 1984년에 제안된 알고리즘이다.
 "Nagle 알고리즘은 앞서 전송한 데이터에 대한 ACK 메시지를 받아야만, 다음 데이터를 전송하는 알고리즘이다."
극단적인 예로, 채팅을 위하여 수십번의 enter를 눌러 채팅을 보내게 되면 의미없는(?) 데이터를 계속해서 전송하여 트래픽을 유발한다. 따라서 이 데이터들을 출력버퍼에 한번에 묶어 전송하려는 알고리즘이다.

 *Nagle 알고리즘의 중단

 int opt_val = 1; // 1 : Nagle off / 0 : Nagle on
 setsockopt(sock, IPPROTO_TCP, TCP_NODEALY, (void*)&opt_val, sizeof(opt_val));

와 같이 선언해 주면 된다.

